package com.mysite.sbb.question;

import java.util.List;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
//import org.springframework.web.bind.annotation.ResponseBody;

import lombok.RequiredArgsConstructor;

@RequestMapping("/question") //URL의 프리픽스가 모두 /question으로 시작
							 //이런 경우 클래스명 위에 @RequestMapping("/question") 애너테이션을 추가하고 메서드 단위에서는 /question 를 생략한 그 뒷 부분만을 적으면 된다.
@RequiredArgsConstructor //롬복이 제공하는 애너테이션으로 final이 붙은 속성을 포함하는 생성자를 자동으로 생성하는 역할
@Controller
public class QuestionController {
	
//	private final QuestionRepository questionRepository; //스프링 의존성 주입 규칙에 의해 questionRepository 객체가 자동으로 주입
	private final QuestionService questionService;
	
	@GetMapping("/list")
//	@ResponseBody //http요청의 본문(body)이 그대로 전달
	public String list(Model model) {
		
//		List<Question> questionList = this.questionRepository.findAll(); // 질문 목록 데이터인 questionList를 생성
		List<Question> questionList = this.questionService.getList();
		
		model.addAttribute("questionList", questionList); //Model 객체에 "questionList" 라는 이름으로 값을 저장
														  //Model 객체는 자바 클래스와 템플릿 간의 연결고리 역할을 한다. Model 객체에 값을 담아두면 템플릿에서 그 값을 사용할 수 있다.
		return "question_list"; //question_list.html
//		return "question list";
//		return "<script>alert(" + questionList.size() + ");</script>";
	}
	
	@GetMapping(value = "/detail/{id}") 
	public String detail(Model model, @PathVariable("id") Integer id) { //변하는 id 값을 얻을 때에는 @PathVariable 애너테이션을 사용
		Question question = this.questionService.getQuestion(id);
		model.addAttribute("question", question);
		return "question_detail";
	}
	
	@GetMapping("/create")
	public String questionCreate() {
		return "question_form";
	}
	
}
