package com.mysite.sbb.question;

import java.util.List;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.validation.BindingResult;
import jakarta.validation.Valid;
//import org.springframework.web.bind.annotation.ResponseBody;

import lombok.RequiredArgsConstructor;

@RequestMapping("/question") //URL의 프리픽스가 모두 /question으로 시작
							 //이런 경우 클래스명 위에 @RequestMapping("/question") 애너테이션을 추가하고 메서드 단위에서는 /question 를 생략한 그 뒷 부분만을 적으면 된다.
@RequiredArgsConstructor //롬복이 제공하는 애너테이션으로 final이 붙은 속성을 포함하는 생성자를 자동으로 생성하는 역할
@Controller
public class QuestionController {
	
//	private final QuestionRepository questionRepository; //스프링 의존성 주입 규칙에 의해 questionRepository 객체가 자동으로 주입
	private final QuestionService questionService;
	
	@GetMapping("/list")
//	@ResponseBody //http요청의 본문(body)이 그대로 전달
	public String list(Model model) {
		
//		List<Question> questionList = this.questionRepository.findAll(); // 질문 목록 데이터인 questionList를 생성
		List<Question> questionList = this.questionService.getList();
		
		model.addAttribute("questionList", questionList); //Model 객체에 "questionList" 라는 이름으로 값을 저장
														  //Model 객체는 자바 클래스와 템플릿 간의 연결고리 역할을 한다. Model 객체에 값을 담아두면 템플릿에서 그 값을 사용할 수 있다.
		return "question_list"; //question_list.html
//		return "question list";
//		return "<script>alert(" + questionList.size() + ");</script>";
	}
	
	@GetMapping(value = "/detail/{id}") 
	public String detail(Model model, @PathVariable("id") Integer id) { //변하는 id 값을 얻을 때에는 @PathVariable 애너테이션을 사용
		Question question = this.questionService.getQuestion(id);
		model.addAttribute("question", question);
		return "question_detail";
	}
	
	@GetMapping("/create") //"질문 등록하기" 버튼을 통한 /question/create 요청은 GET 요청에 해당하므로 @GetMapping 애너테이션을 사용
//	public String questionCreate() {
	public String questionCreate(QuestionForm questionForm) { //question_form.html 템플릿은 "질문 등록하기" 버튼을 통해 GET 방식으로 요청되더라도 th:object에 의해 QuestionForm 객체가 필요
		return "question_form";
	}
	
	@PostMapping("/create") //POST 방식으로 요청한 /question/create URL을 처리
	//public String questionCreate(@RequestParam String subject, @RequestParam String content) {  //화면에서 입력한 제목(subject)과 내용(content)을 매개변수로 받는다.
	public String questionCreate(@Valid QuestionForm questionForm, BindingResult bindingResult) { //@Valid 애너테이션을 적용하면 QuestionForm의 @NotEmpty, @Size 등으로 설정한 검증 기능이 동작
																								  //BindingResult 매개변수는 @Valid 애너테이션으로 인해 검증이 수행된 결과를 의미하는 객체
																								  //BindingResult 매개변수는 항상 @Valid 매개변수 바로 뒤에 위치해야 한다. 만약 2개의 매개변수의 위치가 정확하지 않다면 @Valid만 적용이 되어 입력값 검증 실패 시 400 오류가 발생
		//질문 등록 템플릿에서 필드 항목으로 사용했던 subject, content의 이름과 동일하게 해야 함
		// 질문 저장
		if(bindingResult.hasErrors()) { //bindResult.hasErrors()를 호출하여 오류가 있는 경우에는 다시 폼을 작성하는 화면을 렌더링
			return "question_form";
		}
//		this.questionService.create(subject, content);
		this.questionService.create(questionForm.getSubject(), questionForm.getContent());
		return "redirect:/question/list"; // 질문 저장 후 질문목록으로 이동
	}
	
}
